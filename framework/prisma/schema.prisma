// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// ENUMS - Definidos al inicio para mejor organización
// ==========================================

enum RolBase {
  ADMINISTRADOR
  LOGISTICO
  RECTOR
  DIRECTIVO_INSTITUCIONAL
}

enum EstadoReserva {
  CREADO
  REVISADA
  APROBADO
  CANCELADO
}

enum EstadoSolicitud {
  PENDIENTE
  APROBADA
  RECHAZADA
}

enum EstadoOrden {
  CREADO
  REVISADA
  APROBADO
  CANCELADO
}

enum EstadoEnvio {
  PENDIENTE
  ENVIADO
  FALLIDO
  REENVIADO
}

// ==========================================
// USUARIOS Y ROLES
// ==========================================
model Usuario {
  id        String  @id @default(cuid())
  email     String  @unique
  imageUrl  String?
  biografia String?
  telefono  String?
  activo    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuarios")
}

model UsuarioRol {
  id    String  @id @default(cuid())
  email String // correo del usuario
  rol   RolBase

  @@map("usuario_roles")
}

// ==========================================
// SEDES Y ÁREAS
// ==========================================
model Sede {
  id        String  @id @default(cuid())
  nombre    String  @unique
  ubicacion String?

  areas   SedeArea[]
  locales Local[]
}

model Area {
  id          String   @id @default(cuid())
  codigo      String   @unique
  nombre      String
  directivos  String[] // correos de directivos
  almaceneros String[] // correos de almaceneros

  sedes   SedeArea[]
  locales Local[]
  medios  Medio[]
}

model SedeArea {
  sedeId String
  areaId String

  sede Sede @relation(fields: [sedeId], references: [id])
  area Area @relation(fields: [areaId], references: [id])

  @@id([sedeId, areaId])
}

// ==========================================
// LOCALES Y MEDIOS
// ==========================================
model Local {
  id           String   @id @default(cuid())
  codigo       String   @unique
  nombre       String
  capacidad    Int
  responsables String[] // correos de responsables

  areaId String
  area   Area   @relation(fields: [areaId], references: [id])

  sedeId String
  sede   Sede   @relation(fields: [sedeId], references: [id])

  reservas Reserva[]
  eventos  Evento[]
  medios   Medio[]
}

model Medio {
  id           String   @id @default(cuid())
  codigo       String   @unique
  nombre       String
  descripcion  String?
  responsables String[] // correos de responsables

  localId String
  local   Local  @relation(fields: [localId], references: [id])

  areaId String
  area   Area   @relation(fields: [areaId], references: [id])

  reservas Reserva[]
  eventos  Evento[]
}

// ==========================================
// ACTIVIDADES
// ==========================================
model TipoActividad {
  id        String   @id @default(cuid())
  nombre    String
  icono     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actividades Actividad[]
}

model Actividad {
  id           String   @id @default(cuid())
  nombre       String
  descripcion  String?
  creadorEmail String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tipoId String
  tipo   TipoActividad @relation(fields: [tipoId], references: [id])

  eventos Evento[]
}

// ==========================================
// EVENTOS, RESERVAS Y SOLICITUDES
// ==========================================
model Evento {
  id           String   @id @default(cuid())
  inicio       DateTime
  fin          DateTime
  creadorEmail String

  // Relación opcional a Actividad
  actividadId String?
  actividad   Actividad? @relation(fields: [actividadId], references: [id])

  // Lugar del evento (opcional si es personal)
  localId String?
  local   Local?  @relation(fields: [localId], references: [id])

  medioId String?
  medio   Medio?  @relation(fields: [medioId], references: [id])

  // Recordatorios
  eventoReferenciaId String?
  eventoReferencia   Evento?  @relation("RecordatorioDeEvento", fields: [eventoReferenciaId], references: [id])
  recordatorios      Evento[] @relation("RecordatorioDeEvento")

  // Flujos de aprobación
  solicitudPublica SolicitudEventoPublico?
  reservaDetalle   Reserva?

  // Órdenes de aseguramiento asociadas
  ordenesAseguramiento OrdenAseguramiento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reserva {
  id       String @id @default(cuid())
  eventoId String @unique
  evento   Evento @relation(fields: [eventoId], references: [id])

  participantes    Int
  estado           EstadoReserva @default(CREADO)
  solicitanteEmail String
  preside          String?

  trazas  TrazaReserva[]
  Local   Local?         @relation(fields: [localId], references: [id])
  localId String?
  Medio   Medio?         @relation(fields: [medioId], references: [id])
  medioId String?

  @@map("reservas")
}

model SolicitudEventoPublico {
  id     String          @id @default(cuid())
  estado EstadoSolicitud @default(PENDIENTE)
  notas  String? // motivo / detalles adicionales

  solicitanteEmail String
  revisorEmail     String? // directivo/rector que revisa
  
  eventoId String @unique
  evento   Evento @relation(fields: [eventoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("solicitudes_evento_publico")
}

// ==========================================
// ASEGURAMIENTOS
// ==========================================
model OrdenAseguramiento {
  id     String      @id @default(cuid())
  estado EstadoOrden @default(CREADO)

  creadorEmail     String // solicitante
  revisorEmail     String? // directivo/almacenero designado
  modificadorEmail String? // logístico
  notas            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventoId String
  evento   Evento @relation(fields: [eventoId], references: [id])

  detalles Aseguramiento[]
  trazas   TrazaOrdenAseguramiento[]
}

model Aseguramiento {
  id       String  @id @default(cuid())
  cantidad Int
  detalles String? // texto libre con información adicional

  ordenId String
  orden   OrdenAseguramiento @relation(fields: [ordenId], references: [id])

  tipoId String
  tipo   TipoAseguramiento @relation(fields: [tipoId], references: [id])
}

model TipoAseguramiento {
  id          String   @id @default(cuid())
  nombre      String
  icono       String? // emoji, URL o clase de ícono
  descripcion String? // detalles explicativos del tipo de aseguramiento
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  aseguramientos Aseguramiento[]

  @@map("tipos_aseguramiento")
}

// ==========================================
// NOTIFICACIONES
// ==========================================
model Notificacion {
  id                String      @id @default(cuid())
  destinatarioEmail String
  titulo            String
  descripcion       String
  accion            String?
  leida             Boolean     @default(false)
  estadoEnvio       EstadoEnvio @default(PENDIENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notificaciones")
}

// ==========================================
// TRAZABILIDAD (AUDITORÍA)
// ==========================================
model TrazaGeneral {
  id          String   @id @default(cuid())
  actorEmail  String
  rol         String
  accion      String
  entidad     String
  entidadId   String
  descripcion String?
  createdAt   DateTime @default(now())
}

model TrazaReserva {
  id        String  @id @default(cuid())
  reservaId String
  reserva   Reserva @relation(fields: [reservaId], references: [id])

  actorEmail String
  accion     String
  notas      String?
  createdAt  DateTime @default(now())
}

model TrazaOrdenAseguramiento {
  id      String             @id @default(cuid())
  ordenId String
  orden   OrdenAseguramiento @relation(fields: [ordenId], references: [id])

  actorEmail String
  accion     String
  notas      String?
  createdAt  DateTime @default(now())
}
